{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","to","title","aboutText","toggleMode","htmlFor","Textform","text","setText","Color","heading","value","onChange","event","target","rows","newText","toUpperCase","toLowerCase","copyText","document","getElementById","select","navigator","clipboard","writeText","split","filter","element","length","defaultProps","App","setMode","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.80c612d6.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable dark mode\")\r\n\r\n    const toggleStyle = ()=>{\r\n        if(myStyle.color === \"black\"){\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={myStyle}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\">\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary\" type=\"button\" onClick={toggleStyle}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\" >{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        </li>\r\n                    </ul>\r\n                    {/* dark mode button */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'white'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    // title: \"Set title here\",\r\n    aboutText: \"About us\"\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function Textform(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"UpperCase was clicked\", text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"UpperCase was clicked\", text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        let copyText = document.getElementById(\"mybox\")\r\n        copyText.select()\r\n        navigator.clipboard.writeText(copyText.value)\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On change\");\r\n        setText(event.target.value)\r\n    } \r\n\r\n    const [text, setText] = useState(\"\")\r\n    // text = \"new text\"    //wrong way to update the text\r\n    // setText(\"new Text\")  // correct way to update the text\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{Color: props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value ={text} style={{backgroundColor: props.mode==='dark'?'#4c84d7':'white'}} onChange={handleOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary my-1\" onClick={handleUpClick}>Convert to UppeCase</button>\r\n            <button className=\"btn btn-primary mx-3 my-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-0 my-1\" onClick={handleCopy}>Copy Text</button>\r\n        </div>\r\n\r\n        <div className=\"container\" style={{Color: props.mode==='dark'?'white':'black'}}>\r\n            <h3>Your text summary</h3>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} minuts to read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0? text: \"Enter something in the above textbox to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport Textform from './Components/Textform';\nimport React, { useState } from 'react'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#4c84d7';\n    }\n    else {\n      setMode('light')\n      document.body.style.backgroundColor = 'white';\n    }\n  }\n\n  return (\n    <>\n      <Router>\n\n        <Navbar title=\"Textut\" mode={mode} toggleMode={toggleMode} />\n\n        <div className=\"container my-3\">\n            <Switch>\n              <Route exact path=\"/about\">\n                <About />\n              </Route>\n              <Route exact path=\"/\">\n                <Textform heading=\"Enter the text to analyze\" mode={mode} />\n              </Route>\n              <Link></Link>\n            </Switch>\n              <Textform heading=\"Enter the text to analyze\" mode={mode} />\n\n        </div>\n\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}